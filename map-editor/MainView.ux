<App>
	<JavaScript File="App.js" />

	<string ux:Global="CellStateOff" ux:Value=" " />
	<string ux:Global="CellStateBlack" ux:Value="#" />
	<string ux:Global="CellStateWhite" ux:Value="x" />

	<float4 ux:Global="BaseTextColor" ux:Value="#aaa" />
	<float4 ux:Global="HighlightColor" ux:Value="#1DC3FF" />
	<Text ux:Class="BaseText" Color="BaseTextColor" />
	<BaseText ux:Class="Label" FontSize="10" />

	<Panel>
		<WhileTrue Value="{showExportDialog}">
			<Panel Color="#000a" ux:Name="exportDialogOverlay">
				<Rectangle ux:Name="exportDialog" Color="#252525" Alignment="Center" Width="400" CornerRadius="2">
					<StackPanel Margin="20" ItemSpacing="20">
						<Text FontSize="16" Value="EXPORT MAP TO FILE" Color="#666" />
						<TextView Value="{exportPath}" Padding="10" CaretColor="#555" SelectionColor="#fff5" TextWrapping="Wrap" TextTruncation="Standard">
							<Rectangle Layer="Background" Color="#111" CornerRadius="2" />
						</TextView>
						<DockPanel>
							<ToolbarButton Dock="Right" Value="EXPORT" Color="HighlightColor" Alignment="VerticalCenter" Clicked="{exportMap}" />
							<ToolbarButton Dock="Right" Value="CANCEL" Color="#f88" Alignment="VerticalCenter" Clicked="{closeExportDialog}" />
						</DockPanel>
					</StackPanel>
					<Shadow Size="20" Distance="1" Color="#0005" />
				</Rectangle>
				<AddingAnimation>
					<Change exportDialogOverlay.Opacity="0" Duration="0.6" Easing="CubicInOut" />
					<Scale Target="exportDialog" Factor="0.7" Duration="0.4" Easing="BackIn" />
				</AddingAnimation>
				<RemovingAnimation>
					<Change exportDialogOverlay.Opacity="0" Duration="0.6" Easing="CubicInOut" />
					<Scale Target="exportDialog" Factor="0.7" Duration="0.4" Easing="BackIn" />
				</RemovingAnimation>
			</Panel>
		</WhileTrue>
<!-- 
		<ToggleControl ux:Class="Checkbox">
			<string ux:Property="Label" />
			<StackPanel Orientation="Horizontal" Dock="Left" ItemSpacing="5">
				<Material.IconBase ux:Name="icon" Icon="CheckboxBlank" HitTestMode="LocalBounds">
					<Clicked>
						<Toggle Target="this" />
					</Clicked>
					<WhileTrue Value="{ReadProperty Value}">
						<Change icon.Icon="CheckboxMarked" />
						<Change icon.Color="HighlightColor" />
					</WhileTrue>
				</Material.IconBase>
				<Text Color="#888" FontSize="13" Alignment="VerticalCenter">{ReadProperty Label}</Text>
			</StackPanel>
		</ToggleControl> -->

		<DockPanel Background="#111" ux:Name="foo" Focus.IsFocusable="true">
			<Grid ux:Name="mapGrid"
				ColumnCount="{width}"
				RowCount="{height}"
				Aspect="{width} / {height}"
				BoxSizing="FillAspect"
				Margin="10"
				CellSpacing="1">

				<LayoutAnimation>
					<Move RelativeTo="PositionChange" Vector="1,1,0" Duration=".4" Easing="CubicInOut" />
					<Resize RelativeTo="SizeChange" Vector="1,1" Duration=".4" Easing="CubicInOut" />
				</LayoutAnimation>

				<Each Items="{cells}" IdentityKey="id">
					<Rectangle ux:Name="cell" Row="{y}" Column="{x}" HitTestMode="LocalBounds">
						<SolidColor ux:Name="cellColor" />
						<WhileHovering Bypass="Never">
							<WhilePressed Bypass="Never">
								<HackCallback Visual="mapGrid" Handler="{toggle}" AtProgress="0.5" />
							</WhilePressed>
						</WhileHovering>

						<WhileTrue Value="{state} == CellStateOff">
							<Change Target="cellColor.Color" Value="#444" Duration="0.04" />
						</WhileTrue>

						<WhileTrue Value="{state} == CellStateBlack">
							<Change Target="cellColor.Color" Value="#000" Duration="0.04" />
						</WhileTrue>

						<WhileTrue Value="{state} == CellStateWhite">
							<Change Target="cellColor.Color" Value="#fff" Duration="0.04" />
						</WhileTrue>
					</Rectangle>
				</Each>
			</Grid>

			<Panel Dock="Bottom" Color="#252525">
				<Rectangle Height="1" Color="#fff2" Layer="Overlay" Alignment="Top" />
				<DockPanel>
					<Grid Dock="Left" Columns="auto,auto,auto" Alignment="VerticalCenter">
						<ToolbarGroup Label="WIDTH">
							<NumberPicker Value="{width}"
								OnIncrement="{addCol}"
								OnDecrement="{removeCol}"
								Alignment="Top"
								Margin="4,2,4,0" />
						</ToolbarGroup>
						<ToolbarGroup Label="HEIGHT">
							<NumberPicker Value="{height}"
								OnIncrement="{addRow}"
								OnDecrement="{removeRow}"
								Alignment="Top"
								Margin="4,2,4,0" />
						</ToolbarGroup>
						<ToolbarGroup Label="TOOLS">
							<ToolPicker
								Tool="{currentTool}"
								Alignment="VerticalCenter"
								Margin="4,0" />

							<LayoutAnimation>
								<Resize RelativeTo="SizeChange" X="1" Duration="0.2" Easing="CubicInOut" />
							</LayoutAnimation>
						</ToolbarGroup>
					</Grid>
					<StackPanel Alignment="VerticalCenter" Orientation="Horizontal" Dock="Right">
						<StackPanel Orientation="Horizontal" Padding="4" ItemSpacing="2">
							<ToolbarButton Color="HighlightColor" Value="EXPORT" Clicked="{exportMap}" Margin="5,0" Alignment="VerticalCenter" />
							<!-- <Rectangle Width="1" Color="#0000" Margin="0,-4" /> -->
							<Material.IconBase
								Icon="Settings"
								Color="#fffc"
								Size="14"
								Padding="1,0,2,0"
								Clicked="{openExportDialog}"
								HitTestMode="LocalBounds"
								/>
							<Rectangle Layer="Background" Color="#0003" CornerRadius="2" />
						</StackPanel>
						<ToolbarButton Color="#F44336" Value="RESET" Clicked="{resetMap}" Alignment="VerticalCenter" />
					</StackPanel>
				</DockPanel>
			</Panel>
		</DockPanel>
	</Panel>

	<Rectangle ux:Class="VerticalSpacer" Width="1" Color="#3338" Alignment="HorizontalCenter" />

	<StackPanel ux:Class="ToolPicker" Orientation="Horizontal">
		<string ux:Property="Tool" />
		<Selection Value="{Property Tool}" MaxCount="1" Replace="Newest" />

		<ToolPickerItem Icon="Numeric1Box" Tool="black" Hotkey="D1" />
		<ToolPickerItem Icon="Numeric2Box" Tool="white" Hotkey="D2" />
		<ToolPickerItem Icon="Texture" Tool="wall" Hotkey="D3" />
		<Panel>
			<LetBool ux:Name="isSelected" Value="false" />
			<ToolPickerItem ux:Name="fillItem" Icon="Water" Tool="fill" Hotkey="D4">
				<WhileSelected>
					<Clicked>
						<HackCallback Handler="{toggleFillState}" />
					</Clicked>

					<Change isSelected.Value="True" Delay="0" DelayBack="0" />
					<Move Vector="-7, -7, 0" Duration="0.2" DelayBack="0" Easing="CubicInOut" />
					<Scale Factor="0.8" Duration="0.2" Easing="CubicInOut" DelayBack="0" />
					<Rotate Degrees="360" Duration="0" EasingBack="CubicIn" DurationBack=".7" />

					<OnKeyPress Key="D4">
						<HackCallback Visual="fillItem" Handler="{toggleFillState}" />
					</OnKeyPress>
				</WhileSelected>
			</ToolPickerItem>
			<Each Items="{currentFillState}" Identity="Object">
				<ToolPickerItemBase
					ux:Name="fillStateButton"
					Icon="Texture"
					Clicked="{toggleFillState}">
					<Scaling ux:Name="fillStateButtonScale" Factor="0.7" />
					<WhileFalse Value="{isSelected}">
						<Change fillStateButton.Opacity="0" Duration="0.1"  Easing="CubicInOut" DelayBack="0" DurationBack="0.04" />
						<Change fillStateButtonScale.Factor="0.01" Duration="0.2" Easing="CubicOut" DelayBack="0" />
						<Move Vector="7, 7, 0" Duration="0.2" Easing="CubicInOut" />
						<Scale Factor="0.8" Duration="0.2" Easing="CubicInOut" />
					</WhileFalse>

					<LetString ux:Name="fillState" Value="{Snapshot data()}" />
					<WhileString Value="{fillState}" Equals="#">
						<Change Target="fillStateButton.Icon" Value="Numeric1Box" />
					</WhileString>
					<WhileString Value="{fillState}" Equals="x">
						<Change Target="fillStateButton.Icon" Value="Numeric2Box" />
					</WhileString>

					<AddingAnimation>
						<Move X="1" RelativeTo="Size" Duration="0.3" Easing="CubicInOut" />
						<Change fillStateButton.Opacity="0" Duration="0.3" Easing="CubicInOut" DelayBack="0" />
					</AddingAnimation>
					<RemovingAnimation>
						<Move X="-1" RelativeTo="Size" Duration="0.3" Easing="CubicInOut" />
						<Change fillStateButton.Opacity="0" Duration="0.3" Easing="CubicInOut" DelayBack="0" />
					</RemovingAnimation>
				</ToolPickerItemBase>
			</Each>
			<!-- <Rectangle ux:Name="fillToolGroupBackground" Layer="Background" Color="#0004" CornerRadius="3" /> -->
		</Panel>
		<Viewport Perspective="18" Width="25">
			<ToolPickerItem Icon="StarHalf" Tool="invert" Hotkey="D5">
				<WhileSelected>
					<Rotate DegreesY="360" Duration="0.8" Easing="SinusoidalInOut" DurationBack="0" />
					<Rotate DegreesX="45*3" Duration="0.4" Easing="SinusoidalIn" DurationBack="0" />
					<Rotate DegreesX="-45*3" Delay="0.4" Duration="0.4" Easing="SinusoidalOut" DurationBack="0" />
				</WhileSelected>
			</ToolPickerItem>
		</Viewport>
		<ToolPickerItem Icon="Autorenew" Tool="cycle" Hotkey="D6">
			<WhileSelected>
				<Rotate Degrees="360" Duration="0.6" Easing="CubicInOut" DurationBack="0" />
			</WhileSelected>
		</ToolPickerItem>
	</StackPanel>

	<Material.IconBase ux:Class="ToolPickerItemBase"
		Color="#fff7"
		Height="25"
		Margin="2,0,2,5"
		HitTestMode="LocalBounds" />

	<ToolPickerItemBase ux:Class="ToolPickerItem">
		<Uno.Platform.Key ux:Property="Hotkey" />

		<string ux:Property="Tool" />
		<Selectable Value="{ReadProperty Tool}" />
		<WhileSelected>
			<Change this.Color="HighlightColor" Duration="0.05" Easing="CubicInOut" />
			<DropShadow Size="8" Distance="0"  Color="HighlightColor * (1,1,1, 0.5)" />
		</WhileSelected>

		<Clicked>
			<ToggleSelection Mode="AddOnly" />
		</Clicked>
		<WhileFalse Value="{showExportDialog}">
			<OnKeyPress Key="{ReadProperty Hotkey}">
					<ToggleSelection Mode="AddOnly" />
			</OnKeyPress>
		</WhileFalse>
	</ToolPickerItemBase>

	<Text ux:Class="ToolbarButton" FontSize="13" TextAlignment="Center" Margin="15,0" Color="#000a" HitTestMode="LocalBounds">
		<WhilePressed>
			<Change Target="this.Color" Value="{ReadProperty Color} * (.7, .7, .7, 1)" />
		</WhilePressed>
	</Text>

	<DockPanel ux:Class="ToolbarGroup" Margin="0,4,0,4">
		<string ux:Property="Label" />
		<Label Color="#777" Dock="Top" Alignment="Center" Margin="10,2,10,0">{ReadProperty Label}</Label>
		<VerticalSpacer Layer="Background" Alignment="Right" />
	</DockPanel>

	<Material.IconBase
		ux:Class="StepperButton"
		Color="BaseTextColor"
		Size="20"
		HitTestMode="LocalBounds">
		<WhilePressed>
			<Change this.Color="#888" Duration="0.1" />
		</WhilePressed>
		<WhileDisabled>
			<Change this.Opacity="0.2" Duration=".3" Easing="CubicInOut" />
		</WhileDisabled>
		<WhilePressed>
			<Instance>
				<Circle ux:Name="tapCircle" Color="#fff1" Layer="Background">
					<AddingAnimation>
						<Scale Factor="0.5" Duration="0.04" Easing="CubicIn" />
						<Change tapCircle.Opacity="0" Duration="0.04" />
					</AddingAnimation>
					<RemovingAnimation>
						<Scale Factor="0" Duration="0.6" Easing="CubicInOut" />
						<Change tapCircle.Opacity="0" Duration="0.6" />
					</RemovingAnimation>
				</Circle>
			</Instance>
		</WhilePressed>
	</Material.IconBase>

	<StackPanel ux:Class="NumberPicker" MinWidth="90">
		<double ux:Property="Value" />
		<object ux:Property="OnIncrement" />
		<object ux:Property="OnDecrement" />

		<DockPanel Margin="5,0">
			<StepperButton
				Icon="Minus"
				Dock="Left"
				Clicked="{ReadProperty this.OnDecrement}"
				IsEnabled="{ReadProperty Value} > 4" />
			<BaseText
				Value="{ReadProperty this.Value}"
				FontSize="14"
				Color="HighlightColor"
				Alignment="Center" />
			<StepperButton 
				Icon="Plus"
				Dock="Right"
				Clicked="{ReadProperty this.OnIncrement}" />
		</DockPanel>
	</StackPanel>
</App>