<App>
	<string ux:Global="CellStateOff" ux:Value=" " />
	<string ux:Global="CellStateBlack" ux:Value="#" />
	<string ux:Global="CellStateWhite" ux:Value="x" />

	<JavaScript>
		const Observable = require("FuseJS/Observable");

		const width = Observable(18);
		const height = Observable(10);

		const CELL_STATE_OFF = " ";
		const CELL_STATE_BLACK = "#";
		const CELL_STATE_WHITE = "x";

		function nextState(state) {
			switch(state) {
				case CELL_STATE_OFF:   return CELL_STATE_BLACK;
				case CELL_STATE_BLACK: return CELL_STATE_WHITE;
				default:               return CELL_STATE_OFF;
			}
		}

		class Cell {
			constructor(row, col, state) {
				this.id = `${row},${col}`;
				this.row = row;
				this.col = col;
				this.state = Observable(state);

				this.toggle = () => {
					this.state.value = nextState(this.state.value);
				}
			}
		}

		const cells = Observable();
		for (let row = 0; row < height.value; ++row) {
			for (let col = 0; col < width.value; ++col) {
				let state = CELL_STATE_OFF;
				cells.add(new Cell(row, col, state))
			}
		}

		let oldWidth = width.value;
		let oldHeight = height.value;

		function eachRow(fn) {
			let a = [];
			for (let y = 0; y < height.value; ++y) {
				a.push(fn(y));
			}
			return a;
		}

		function eachColumn(fn) {
			let a = [];
			for (let x = 0; x < width.value; ++x) {
				a.push(fn(x));
			}
			return a;
		}

		function addRow() {
			cells.addAll(
				eachColumn(col =>
					new Cell(height.value, col, CELL_STATE_OFF)));
			height.value++;
		}

		function addCol() {
			cells.addAll(
				eachRow(row =>
					new Cell(row, width.value, CELL_STATE_OFF)));
			width.value++;
		}

		function removeRow() {
			height.value--;
			trimCells();
		}

		function removeCol() {
			width.value--;
			trimCells();
		}

		function trimCells() {
			cells.removeWhere(cell =>
				cell.col >= width.value ||
				cell.row >= height.value
			)
		}

		const resetMap = () => {
			cells.forEach((cell) => {
				cell.state.value = CELL_STATE_OFF;
			})
		}

		const exportMap = () => {
			let width = width.value;
			let height = height.value;

			const pointIndex = (row, col) => col*width + row;
			const cellIndex = (cell) => pointIndex(cell.row, cell.col);

			const cellStates = new Array(width*height);
			cells.forEach(cell => {
				cellStates[cellIndex]Â = cell.state;
			})

			let output = `${width} ${height}\n`;
			
			for (let row = 0; row < height; ++row) {
				for (let col = 0; col < width; ++col) {
					output += cellStates[pointIndex(row, col)];
				}
				output += "\n";
			}
		}

		module.exports = {
			width,
			height,
			cells,
			exportMap,
			resetMap,
			addRow,
			addCol,
			removeRow,
			removeCol,
		};
	</JavaScript>

	<DockPanel Background="#111">
		<Grid ColumnCount="{width}" RowCount="{height}" Aspect="({width} / {height})" BoxSizing="FillAspect" Margin="10">
			<Each Items="{cells}" IdentityKey="{id}">
				<Rectangle ux:Name="cell"
					Row="{row}"
					Column="{col}"
					HitTestMode="LocalBounds"
					Margin="1"
					Clicked="{toggle}">
					<SolidColor ux:Name="cellColor" Color="#666" />

					<WhileTrue Value="{state} == CellStateBlack">
						<Change Target="cellColor.Color" Value="#000" Duration="0.2" />
					</WhileTrue>

					<WhileTrue Value="{state} == CellStateWhite">
						<Change Target="cellColor.Color" Value="#fff" Duration="0.2" />
					</WhileTrue>
				</Rectangle>
			</Each>
		</Grid>

		<DockPanel Dock="Bottom"  Color="#eee">
			<Grid Dock="Left" Columns="auto,auto,auto">
				<ToolbarGroup Label="Width">
					<NumberPicker Value="{width}"
						OnIncrement="{addCol}"
						OnDecrement="{removeCol}" />
				</ToolbarGroup>
				<ToolbarGroup Label="Height">
					<NumberPicker Value="{height}"
						OnIncrement="{addRow}"
						OnDecrement="{removeRow}" />
				</ToolbarGroup>
				<ToolbarButton Color="#444" Label="Reset" Clicked="{resetMap}" />
			</Grid>
			<ToolbarButton Dock="Right" Label="Export" Clicked="{exportMap}" />
		</DockPanel>
	</DockPanel>

	<Rectangle ux:Class="ToolbarButton" Color="#37f" CornerRadius="3" Alignment="Center" Margin="20">
		<string ux:Property="Label" />
		<Text Value="{ReadProperty Label}" Alignment="Center" Margin="20" Color="#fff" />
	</Rectangle>

	<StackPanel ux:Class="ToolbarGroup" Margin="16">
		<string ux:Property="Label" />
		<Label Alignment="Center">{ReadProperty Label}</Label>
	</StackPanel>

	<Text ux:Class="BaseText" Color="#333" />
	<BaseText ux:Class="Label" FontSize="10" />

	<StackPanel ux:Class="NumberPicker" MinWidth="80">
		<double ux:Property="Value" />
		<object ux:Property="OnIncrement" />
		<object ux:Property="OnDecrement" />
		<BaseText Value="{ReadProperty this.Value}" FontSize="20" Alignment="Center" />

		<Rectangle ux:Class="StepperButton" Height="22" Color="#aaa">
			<string ux:Property="Label" />
			<Text Value="{ReadProperty this.Label}" Color="#fff" Alignment="Center" />
			<Clicked>
				<Change this.Color="#888" Duration="0.1" />
			</Clicked>
		</Rectangle>

		<Grid Columns="1*,1*" Margin="0,5,0,0" CellSpacing="1">
			<StepperButton Label="-" CornerRadius="3,0,0,3" Clicked="{ReadProperty this.OnDecrement}" />
			<StepperButton Label="+" CornerRadius="0,3,3,0" Clicked="{ReadProperty this.OnIncrement}" />
		</Grid>
	</StackPanel>
</App>